// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// CCMVMI
arma::umat CCMVMI(const arma::umat& Y, const arma::umat& R, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& gamma, const arma::mat& log_gamma, const arma::mat& log_1_m_gamma, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta);
RcppExport SEXP _CausalBNPBook_CCMVMI(SEXP YSEXP, SEXP RSEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP gammaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(CCMVMI(Y, R, omega, log_omega, gamma, log_gamma, log_1_m_gamma, beta, log_beta, log_1_m_beta));
    return rcpp_result_gen;
END_RCPP
}
// CCMVGcomp
arma::vec CCMVGcomp(int N_sim, int J, int j_0, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& gamma, const arma::mat& log_gamma, const arma::mat& log_1_m_gamma, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta, const double& xi);
RcppExport SEXP _CausalBNPBook_CCMVGcomp(SEXP N_simSEXP, SEXP JSEXP, SEXP j_0SEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP gammaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_sim(N_simSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type j_0(j_0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(CCMVGcomp(N_sim, J, j_0, omega, log_omega, gamma, log_gamma, log_1_m_gamma, beta, log_beta, log_1_m_beta, xi));
    return rcpp_result_gen;
END_RCPP
}
// cluster
List cluster(arma::vec y, arma::mat X, arma::mat matX, arma::ivec Sy, arma::ivec Sx, arma::mat betaY, arma::mat xPiPars, arma::mat xMuPars, arma::mat xSigPars, double alphapsi, double alphatheta, arma::vec h0y, arma::vec h0i, arma::imat uniqueS, double c0, double mu0, double nu0, double tau, double a0, double b0, arma::vec betainit, arma::mat diagbetacov0, int p1, int ptx, int p2);
RcppExport SEXP _CausalBNPBook_cluster(SEXP ySEXP, SEXP XSEXP, SEXP matXSEXP, SEXP SySEXP, SEXP SxSEXP, SEXP betaYSEXP, SEXP xPiParsSEXP, SEXP xMuParsSEXP, SEXP xSigParsSEXP, SEXP alphapsiSEXP, SEXP alphathetaSEXP, SEXP h0ySEXP, SEXP h0iSEXP, SEXP uniqueSSEXP, SEXP c0SEXP, SEXP mu0SEXP, SEXP nu0SEXP, SEXP tauSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP betainitSEXP, SEXP diagbetacov0SEXP, SEXP p1SEXP, SEXP ptxSEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type matX(matXSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type Sy(SySEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type Sx(SxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betaY(betaYSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xPiPars(xPiParsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xMuPars(xMuParsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xSigPars(xSigParsSEXP);
    Rcpp::traits::input_parameter< double >::type alphapsi(alphapsiSEXP);
    Rcpp::traits::input_parameter< double >::type alphatheta(alphathetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h0y(h0ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h0i(h0iSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type uniqueS(uniqueSSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type diagbetacov0(diagbetacov0SEXP);
    Rcpp::traits::input_parameter< int >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< int >::type ptx(ptxSEXP);
    Rcpp::traits::input_parameter< int >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(cluster(y, X, matX, Sy, Sx, betaY, xPiPars, xMuPars, xSigPars, alphapsi, alphatheta, h0y, h0i, uniqueS, c0, mu0, nu0, tau, a0, b0, betainit, diagbetacov0, p1, ptx, p2));
    return rcpp_result_gen;
END_RCPP
}
// cluster_continuous
List cluster_continuous(arma::vec y, arma::mat X, arma::mat matX, arma::ivec Sy, arma::ivec Sx, arma::mat betaY, arma::vec sig2, arma::mat xPiPars, arma::mat xMuPars, arma::mat xSigPars, double alphapsi, double alphatheta, arma::vec h0y, arma::vec h0i, arma::imat uniqueS, double c0, double mu0, double nu0, double tau, double a0, double b0, double betaa0, double betab0, arma::vec betainit, arma::mat diagbetacov0, int p1, int ptx, int p2);
RcppExport SEXP _CausalBNPBook_cluster_continuous(SEXP ySEXP, SEXP XSEXP, SEXP matXSEXP, SEXP SySEXP, SEXP SxSEXP, SEXP betaYSEXP, SEXP sig2SEXP, SEXP xPiParsSEXP, SEXP xMuParsSEXP, SEXP xSigParsSEXP, SEXP alphapsiSEXP, SEXP alphathetaSEXP, SEXP h0ySEXP, SEXP h0iSEXP, SEXP uniqueSSEXP, SEXP c0SEXP, SEXP mu0SEXP, SEXP nu0SEXP, SEXP tauSEXP, SEXP a0SEXP, SEXP b0SEXP, SEXP betaa0SEXP, SEXP betab0SEXP, SEXP betainitSEXP, SEXP diagbetacov0SEXP, SEXP p1SEXP, SEXP ptxSEXP, SEXP p2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type matX(matXSEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type Sy(SySEXP);
    Rcpp::traits::input_parameter< arma::ivec >::type Sx(SxSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type betaY(betaYSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type sig2(sig2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xPiPars(xPiParsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xMuPars(xMuParsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type xSigPars(xSigParsSEXP);
    Rcpp::traits::input_parameter< double >::type alphapsi(alphapsiSEXP);
    Rcpp::traits::input_parameter< double >::type alphatheta(alphathetaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h0y(h0ySEXP);
    Rcpp::traits::input_parameter< arma::vec >::type h0i(h0iSEXP);
    Rcpp::traits::input_parameter< arma::imat >::type uniqueS(uniqueSSEXP);
    Rcpp::traits::input_parameter< double >::type c0(c0SEXP);
    Rcpp::traits::input_parameter< double >::type mu0(mu0SEXP);
    Rcpp::traits::input_parameter< double >::type nu0(nu0SEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< double >::type a0(a0SEXP);
    Rcpp::traits::input_parameter< double >::type b0(b0SEXP);
    Rcpp::traits::input_parameter< double >::type betaa0(betaa0SEXP);
    Rcpp::traits::input_parameter< double >::type betab0(betab0SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betainit(betainitSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type diagbetacov0(diagbetacov0SEXP);
    Rcpp::traits::input_parameter< int >::type p1(p1SEXP);
    Rcpp::traits::input_parameter< int >::type ptx(ptxSEXP);
    Rcpp::traits::input_parameter< int >::type p2(p2SEXP);
    rcpp_result_gen = Rcpp::wrap(cluster_continuous(y, X, matX, Sy, Sx, betaY, sig2, xPiPars, xMuPars, xSigPars, alphapsi, alphatheta, h0y, h0i, uniqueS, c0, mu0, nu0, tau, a0, b0, betaa0, betab0, betainit, diagbetacov0, p1, ptx, p2));
    return rcpp_result_gen;
END_RCPP
}
// MARMI
arma::umat MARMI(const arma::umat& Y, const arma::umat& R, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta);
RcppExport SEXP _CausalBNPBook_MARMI(SEXP YSEXP, SEXP RSEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::umat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    rcpp_result_gen = Rcpp::wrap(MARMI(Y, R, omega, log_omega, beta, log_beta, log_1_m_beta));
    return rcpp_result_gen;
END_RCPP
}
// LogSumExp
double LogSumExp(arma::vec x);
RcppExport SEXP _CausalBNPBook_LogSumExp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(LogSumExp(x));
    return rcpp_result_gen;
END_RCPP
}
// NIPMI
arma::mat NIPMI(const arma::mat& Y, const arma::umat& R, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& gamma, const arma::mat& log_gamma, const arma::mat& log_1_m_gamma, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta, const int j_0);
RcppExport SEXP _CausalBNPBook_NIPMI(SEXP YSEXP, SEXP RSEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP gammaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP j_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< const int >::type j_0(j_0SEXP);
    rcpp_result_gen = Rcpp::wrap(NIPMI(Y, R, omega, log_omega, gamma, log_gamma, log_1_m_gamma, beta, log_beta, log_1_m_beta, j_0));
    return rcpp_result_gen;
END_RCPP
}
// ParafacGcomp
arma::vec ParafacGcomp(int N_sim, int J, int j_0, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& gamma, const arma::mat& log_gamma, const arma::mat& log_1_m_gamma, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta, const double& xi);
RcppExport SEXP _CausalBNPBook_ParafacGcomp(SEXP N_simSEXP, SEXP JSEXP, SEXP j_0SEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP gammaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type N_sim(N_simSEXP);
    Rcpp::traits::input_parameter< int >::type J(JSEXP);
    Rcpp::traits::input_parameter< int >::type j_0(j_0SEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< const double& >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(ParafacGcomp(N_sim, J, j_0, omega, log_omega, gamma, log_gamma, log_1_m_gamma, beta, log_beta, log_1_m_beta, xi));
    return rcpp_result_gen;
END_RCPP
}
// UpdateClassMARCpp
List UpdateClassMARCpp(arma::umat Y, arma::umat R, arma::mat log_beta, arma::mat log_1_m_beta, arma::vec log_omega);
RcppExport SEXP _CausalBNPBook_UpdateClassMARCpp(SEXP YSEXP, SEXP RSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP log_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_omega(log_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateClassMARCpp(Y, R, log_beta, log_1_m_beta, log_omega));
    return rcpp_result_gen;
END_RCPP
}
// TLOMI
arma::mat TLOMI(const arma::mat& Y, const arma::umat& R, const arma::vec& omega, const arma::vec& log_omega, const arma::mat& gamma, const arma::mat& log_gamma, const arma::mat& log_1_m_gamma, const arma::mat& beta, const arma::mat& log_beta, const arma::mat& log_1_m_beta, const double xi, const int j_0);
RcppExport SEXP _CausalBNPBook_TLOMI(SEXP YSEXP, SEXP RSEXP, SEXP omegaSEXP, SEXP log_omegaSEXP, SEXP gammaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP betaSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP xiSEXP, SEXP j_0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type Y(YSEXP);
    Rcpp::traits::input_parameter< const arma::umat& >::type R(RSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type omega(omegaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type log_omega(log_omegaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< const double >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const int >::type j_0(j_0SEXP);
    rcpp_result_gen = Rcpp::wrap(TLOMI(Y, R, omega, log_omega, gamma, log_gamma, log_1_m_gamma, beta, log_beta, log_1_m_beta, xi, j_0));
    return rcpp_result_gen;
END_RCPP
}
// UpdateBetaCpp
arma::mat UpdateBetaCpp(arma::mat success_counts, arma::mat failure_counts, arma::vec col_shape_1, arma::vec col_shape_2);
RcppExport SEXP _CausalBNPBook_UpdateBetaCpp(SEXP success_countsSEXP, SEXP failure_countsSEXP, SEXP col_shape_1SEXP, SEXP col_shape_2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::mat >::type success_counts(success_countsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type failure_counts(failure_countsSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type col_shape_1(col_shape_1SEXP);
    Rcpp::traits::input_parameter< arma::vec >::type col_shape_2(col_shape_2SEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateBetaCpp(success_counts, failure_counts, col_shape_1, col_shape_2));
    return rcpp_result_gen;
END_RCPP
}
// UpdateSufficient
List UpdateSufficient(arma::umat Y, arma::umat R, arma::uvec C, int K);
RcppExport SEXP _CausalBNPBook_UpdateSufficient(SEXP YSEXP, SEXP RSEXP, SEXP CSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type C(CSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateSufficient(Y, R, C, K));
    return rcpp_result_gen;
END_RCPP
}
// UpdateClassCpp
List UpdateClassCpp(arma::umat Y, arma::umat R, arma::mat log_beta, arma::mat log_1_m_beta, arma::mat log_gamma, arma::mat log_1_m_gamma, arma::vec log_omega);
RcppExport SEXP _CausalBNPBook_UpdateClassCpp(SEXP YSEXP, SEXP RSEXP, SEXP log_betaSEXP, SEXP log_1_m_betaSEXP, SEXP log_gammaSEXP, SEXP log_1_m_gammaSEXP, SEXP log_omegaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::umat >::type Y(YSEXP);
    Rcpp::traits::input_parameter< arma::umat >::type R(RSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_beta(log_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_1_m_beta(log_1_m_betaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_gamma(log_gammaSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type log_1_m_gamma(log_1_m_gammaSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type log_omega(log_omegaSEXP);
    rcpp_result_gen = Rcpp::wrap(UpdateClassCpp(Y, R, log_beta, log_1_m_beta, log_gamma, log_1_m_gamma, log_omega));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP noshare_impute(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_CausalBNPBook_CCMVMI", (DL_FUNC) &_CausalBNPBook_CCMVMI, 10},
    {"_CausalBNPBook_CCMVGcomp", (DL_FUNC) &_CausalBNPBook_CCMVGcomp, 12},
    {"_CausalBNPBook_cluster", (DL_FUNC) &_CausalBNPBook_cluster, 25},
    {"_CausalBNPBook_cluster_continuous", (DL_FUNC) &_CausalBNPBook_cluster_continuous, 28},
    {"_CausalBNPBook_MARMI", (DL_FUNC) &_CausalBNPBook_MARMI, 7},
    {"_CausalBNPBook_LogSumExp", (DL_FUNC) &_CausalBNPBook_LogSumExp, 1},
    {"_CausalBNPBook_NIPMI", (DL_FUNC) &_CausalBNPBook_NIPMI, 11},
    {"_CausalBNPBook_ParafacGcomp", (DL_FUNC) &_CausalBNPBook_ParafacGcomp, 12},
    {"_CausalBNPBook_UpdateClassMARCpp", (DL_FUNC) &_CausalBNPBook_UpdateClassMARCpp, 5},
    {"_CausalBNPBook_TLOMI", (DL_FUNC) &_CausalBNPBook_TLOMI, 12},
    {"_CausalBNPBook_UpdateBetaCpp", (DL_FUNC) &_CausalBNPBook_UpdateBetaCpp, 4},
    {"_CausalBNPBook_UpdateSufficient", (DL_FUNC) &_CausalBNPBook_UpdateSufficient, 4},
    {"_CausalBNPBook_UpdateClassCpp", (DL_FUNC) &_CausalBNPBook_UpdateClassCpp, 7},
    {"noshare_impute", (DL_FUNC) &noshare_impute, 11},
    {NULL, NULL, 0}
};

RcppExport void R_init_CausalBNPBook(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
